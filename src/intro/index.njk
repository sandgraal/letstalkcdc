---
layout: base.njk
title: "Interactive Introduction to CDC"
description: "An interactive dashboard covering core CDC concepts, methods, architectures, and the tooling ecosystem."
canonicalPath: "/intro/"
eleventyComputed:
  head_extra: |
    <meta property="og:type" content="article">
    <meta property="og:url" content="{{ page.url | absoluteUrl(site) }}">
    <meta property="og:title" content="{{ title }}">
    <meta property="og:description" content="{{ description }}">
    <meta property="og:image" content="{{ '/images/cdc-cover.jpg' | url | absoluteUrl(site) }}">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:url" content="{{ page.url | absoluteUrl(site) }}">
    <meta name="twitter:title" content="{{ title }}">
    <meta name="twitter:description" content="{{ description }}">
    <meta name="twitter:image" content="{{ '/images/cdc-cover.jpg' | url | absoluteUrl(site) }}">
    <link rel="stylesheet" href="{{ '/assets/css/pages/intro.css' | url }}">
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "TechArticle",
        "headline": "Interactive Introduction to CDC",
        "description": "Core concepts, methods, architectures, and tools that define modern Change Data Capture.",
        "url": "{{ page.url | absoluteUrl(site) }}",
        "inLanguage": "en",
        "about": [
          "Change Data Capture",
          "CDC",
          "Transactional Outbox",
          "Log-based CDC"
        ]
      }
    </script>
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "BreadcrumbList",
        "itemListElement": [
          {
            "@type": "ListItem",
            "position": 1,
            "name": "Series Overview",
            "item": "{{ '/overview/' | url | absoluteUrl(site) }}"
          },
          {
            "@type": "ListItem",
            "position": 2,
            "name": "Interactive Introduction to CDC",
            "item": "{{ page.url | absoluteUrl(site) }}"
          }
        ]
      }
    </script>
scripts:
  - "/assets/js/pages/intro.js"
---

{% import "components/ui.njk" as ui %}

{{ ui.hero(heroConfig) | safe }}

<div class="page-wrap prose">

  <nav class="sticky-subnav" aria-label="On this page">
    <ul>
      <li><a href="#intro-outcome">Start here</a></li>
      <li><a href="#cdc-methods">Methods</a></li>
      <li><a href="#core-components">Architecture</a></li>
      <li><a href="#transactional-outbox">Outbox</a></li>
      <li><a href="#operational-gotchas">Operations</a></li>
      <li><a href="#cdc-vendors-title">Tooling</a></li>
      <li><a href="#choose-next">Next steps</a></li>
    </ul>
  </nav>

  <article class="prose">
    <section class="intro-lede" aria-labelledby="intro-outcome">
      <p class="lead">
        Change Data Capture (<strong>CDC</strong>) is the discipline of
        <em>replicating data changes</em> from a source database to downstream
        systems in near real time‚Äîwithout heavy full refreshes.
      </p>
      <div class="intro-callouts">
        <div class="intro-callout outcome" id="intro-outcome">
          <h3>Outcome</h3>
          <p>
            You leave with a mental model for CDC, the vocabulary to compare approaches, and a roadmap into the deeper modules.
          </p>
        </div>
        <div class="intro-callout audience">
          <h3>Who it‚Äôs for</h3>
          <ul>
            <li>Data engineers modernizing nightly batch ETL into streaming pipelines.</li>
            <li>Platform and infra teams tasked with selecting CDC tooling.</li>
            <li>Architects who need common language across producers, brokers, and sinks.</li>
          </ul>
        </div>
      </div>
      <p>
        For decades, moving data between systems meant relying on slow,
        resource-intensive batch jobs that would run overnight.
      </p>
      <p>
        This approach is no longer viable in a world that demands real-time data.
      </p>
      <p>
        How do you keep disparate systems synchronized instantly without overwhelming
        your databases? This is the core problem that Change Data Capture
        (CDC) solves.
      </p>
    </section>

    <nav class="intro-next" aria-labelledby="intro-next-title">
      <h3 id="intro-next-title">What you‚Äôll learn next</h3>
      <ul>
        <li><a href="/strategy/">Strategy &amp; architecture playbook</a> ‚Äî apply the concepts to cross-system designs.</li>
        <li><a href="#cdc-vendors-title">CDC tooling catalog</a> ‚Äî evaluate managed platforms, open source, and enterprise stacks.</li>
        <li><a href="/lab-kafka-debezium/">Hands-on lab: Kafka + Debezium</a> ‚Äî practice capturing and replaying change events.</li>
      </ul>
    </nav>

    <section class="series-roadmap" id="series-roadmap" aria-labelledby="series-roadmap-title">
      <h2 id="series-roadmap-title">How to use this series</h2>
      <ol>
        <li><strong>Start with the overview:</strong> Align on terminology and the CDC value proposition in <a href="/overview/">Series Overview</a>.</li>
        <li><strong>Use this intro as the foundation:</strong> Anchor on methods, architecture, and tooling landscape before exploring edge cases.</li>
        <li><strong>Move into advanced patterns:</strong> Visit <a href="/exactly-once/">Exactly-Once</a>, <a href="/snapshotting/">Snapshotting</a>, and <a href="/schema-evolution/">Schema Evolution</a> for deeper dives.</li>
        <li><strong>Practice and operationalize:</strong> Follow the labs and troubleshooting guides to validate your setup in real environments.</li>
      </ol>
    </section>
    <h2 id="cdc-methods">CDC methods</h2>
    <p class="intro-muted">Choose the capture approach that matches your constraints. Each card highlights the trade-offs‚Äîexpand any card for the full details.</p>
    <div class="cdc-methods-grid" role="list">
      <article class="method-card" id="method-log" role="listitem">
        <header class="method-card-header">
          <span class="method-icon" aria-hidden="true">üìú</span>
          <h3>Log-based CDC (The Gold Standard)</h3>
        </header>
        <ul class="method-highlights">
          <li>‚úÖ Lowest performance impact by tailing committed transaction logs.</li>
          <li>‚úÖ Ordered change events support replay and downstream idempotence.</li>
          <li>‚ö†Ô∏è Requires elevated privileges and careful log-retention tuning.</li>
        </ul>
        <p class="method-link"><a href="/lab-kafka-debezium/">Go deeper with the Debezium lab</a></p>
        <details class="method-details">
          <summary>Show full breakdown</summary>
          <p>
            <strong>Log-based CDC (The Gold Standard):</strong> Reads committed changes
            from the database‚Äôs transaction log (<em>PostgreSQL WAL</em>, <em>MySQL binlog</em>,
            <em>SQL Server transaction log</em>, <em>Oracle redo</em>). It‚Äôs <em>low-impact</em> on OLTP,
            but not free: log retention, I/O, and replication slot/archival settings must be tuned.
            It reliably captures inserts/updates/deletes in order. <em>DDL capture</em> depends on the
            database and connector configuration. PostgreSQL's Write-Ahead Log (WAL) records all changes to
            the database before they are applied, ensuring data integrity and
            durability. Log-based CDC leverages this existing, ordered stream of
            changes for efficient replication. MySQL's binary log (binlog)
            records all data modification statements that change the database
            state. When configured for row-based logging, it provides the
            granular, complete change events necessary for CDC.
          </p>
          <ul>
            <li>
              <em>Advantage: Low Performance Impact.</em> Tails existing logs; no source-table scans or triggers.
            </li>
            <li>
              <em>Advantage: High Fidelity.</em> Captures inserts, updates,
              and deletes, preserving order.
            </li>
            <li>
              <em>Disadvantage: Complexity.</em> Requires DB-level privileges and correct log retention
              (<code>wal_keep_size</code> or logical slots in Postgres; binlog purge in MySQL; T-log backups in SQL Server).
            </li>
          </ul>
        </details>
      </article>
      <article class="method-card" id="method-trigger" role="listitem">
        <header class="method-card-header">
          <span class="method-icon" aria-hidden="true">üîî</span>
          <h3>Trigger-Based CDC</h3>
        </header>
        <ul class="method-highlights">
          <li>‚úÖ Works when log access is impossible or restricted.</li>
          <li>‚ö†Ô∏è Adds synchronous overhead to every OLTP transaction.</li>
          <li>‚ö†Ô∏è Triggers and shadow tables drift with schema changes.</li>
        </ul>
        <p class="method-link"><a href="#transactional-outbox">Go deeper with the transactional outbox</a></p>
        <details class="method-details">
          <summary>Show full breakdown</summary>
          <p>
            <strong>Trigger-Based CDC:</strong> Uses database triggers (ON INSERT/UPDATE/DELETE) to
            write change rows into <em>shadow/audit</em> tables. Sometimes paired with an ‚Äúoutbox‚Äù-style table,
            but the <em>Transactional Outbox</em> pattern can also be implemented without triggers by writing the
            outbox row <em>in the same application transaction</em>. While it
            is database-agnostic and explicit, this approach adds overhead to
            every transaction, directly impacting the performance of your
            primary application's workload (OLTP).
          </p>
          <ul>
            <li>
              <em>Disadvantage: High Performance Impact.</em> Synchronous
              trigger writes increase latency/lock contention.
            </li>
            <li>
              <em>Disadvantage: Management Complexity.</em> Must maintain
              triggers per table; brittle with schema drift.
            </li>
          </ul>
        </details>
      </article>
      <article class="method-card" id="method-polling" role="listitem">
        <header class="method-card-header">
          <span class="method-icon" aria-hidden="true">‚è±Ô∏è</span>
          <h3>Query-Based CDC (Polling)</h3>
        </header>
        <ul class="method-highlights">
          <li>‚úÖ Simplest to bootstrap with schedulers and existing SQL.</li>
          <li>‚ö†Ô∏è Misses intermediate updates and hard deletes without tombstones.</li>
          <li>‚ö†Ô∏è Source database load grows with polling frequency.</li>
        </ul>
        <p class="method-link"><a href="/strategy/">Go deeper with CDC strategy trade-offs</a></p>
        <details class="method-details">
          <summary>Show full breakdown</summary>
          <p>
            <strong>Query-Based CDC (Polling):</strong> The simplest method to
            implement, but also the most fragile. This approach repeatedly
            queries source tables for rows that have changed, typically
            identified by a last_updated timestamp. However, it puts a
            significant load on the source database, can miss updates if
            multiple changes occur between polls, and cannot observe <em>hard deletes</em> (unless you keep tombstone/soft-delete markers).
          </p>
          <ul>
            <li>
              <em>Disadvantage: Cannot Capture Deletes.</em> Deleted rows
              aren‚Äôt selectable.
            </li>
            <li>
              <em>Disadvantage: High Read Load and Latency.</em> Freshness
              tied to polling interval.
            </li>
          </ul>
        </details>
      </article>
    </div>

    <section class="chart-wrapper" aria-labelledby="methods-chart-title">
      <h2 id="methods-chart-title">Visualize the trade-offs</h2>
      <p class="intro-muted">
        Scores range from 1 (weak fit) to 5 (excellent fit) across the priorities teams
        weigh when evaluating CDC approaches.
      </p>
      <div class="chart-container">
        <canvas
          id="methodsChart"
          role="img"
          aria-label="Radar comparison of log-based, trigger-based, and polling CDC across fidelity, source impact, freshness, operational overhead, and implementation speed"
        ></canvas>
      </div>
      <noscript>
        <p class="intro-muted">Enable JavaScript to view the radar comparison.</p>
      </noscript>
    </section>

    <h2 id="methods-comparison">Methods at a Glance</h2>
    <p class="table-intro">Use the scorecard to choose the default (log-based) and spot when alternatives make sense.</p>
    <div id="methods-table" class="table-container">
      <table class="comparison-table">
        <thead>
          <tr>
            <th>Feature</th>
            <th class="is-recommended">Log-Based CDC</th>
            <th>Trigger-Based CDC</th>
            <th>Query-Based CDC (Polling)</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><strong>Performance Impact</strong></td>
            <td data-label="Log-Based CDC">
              <span class="cell-indicator" aria-hidden="true">‚úÖ</span>
              <span class="cell-text">Very Low. Minimal overhead as it reads existing transaction logs.</span>
            </td>
            <td data-label="Trigger-Based CDC">
              <span class="cell-indicator" aria-hidden="true">‚ö†Ô∏è</span>
              <span class="cell-text">High. Adds a synchronous write to every transaction.</span>
            </td>
            <td data-label="Query-Based CDC (Polling)">
              <span class="cell-indicator" aria-hidden="true">‚ö†Ô∏è</span>
              <span class="cell-text">Medium to High. Heavy repetitive reads on the source DB.</span>
            </td>
          </tr>
          <tr>
            <td><strong>Reliability</strong></td>
            <td data-label="Log-Based CDC">
              <span class="cell-indicator" aria-hidden="true">‚úÖ</span>
              <span class="cell-text">Very High. Captures all committed changes, including hard deletes, in order.</span>
            </td>
            <td data-label="Trigger-Based CDC">
              <span class="cell-indicator" aria-hidden="true">‚úÖ</span>
              <span class="cell-text">High. Captures all DML via shadow table.</span>
            </td>
            <td data-label="Query-Based CDC (Polling)">
              <span class="cell-indicator" aria-hidden="true">‚ö†Ô∏è</span>
              <span class="cell-text">Low. Misses deletes and intermediate updates.</span>
            </td>
          </tr>
          <tr>
            <td><strong>Data Latency</strong></td>
            <td data-label="Log-Based CDC">
              <span class="cell-indicator" aria-hidden="true">‚úÖ</span>
              <span class="cell-text">Very Low. Near real-time.</span>
            </td>
            <td data-label="Trigger-Based CDC">
              <span class="cell-indicator" aria-hidden="true">‚úÖ</span>
              <span class="cell-text">Low. Near real-time as changes occur.</span>
            </td>
            <td data-label="Query-Based CDC (Polling)">
              <span class="cell-indicator" aria-hidden="true">‚ö†Ô∏è</span>
              <span class="cell-text">High. Determined by polling interval.</span>
            </td>
          </tr>
          <tr>
            <td><strong>Implementation Complexity</strong></td>
            <td data-label="Log-Based CDC">
              <span class="cell-indicator" aria-hidden="true">‚ö†Ô∏è</span>
              <span class="cell-text">High. Specialized tools, DB config, elevated perms.</span>
            </td>
            <td data-label="Trigger-Based CDC">
              <span class="cell-indicator" aria-hidden="true">‚ö†Ô∏è</span>
              <span class="cell-text">Medium. Write/maintain triggers and shadow tables.</span>
            </td>
            <td data-label="Query-Based CDC (Polling)">
              <span class="cell-indicator" aria-hidden="true">‚úÖ</span>
              <span class="cell-text">Low. Straightforward SQL + scheduler.</span>
            </td>
          </tr>
          <tr>
            <td><strong>Source Schema Impact</strong></td>
            <td data-label="Log-Based CDC">
              <span class="cell-indicator" aria-hidden="true">‚úÖ</span>
              <span class="cell-text">None. No schema changes.</span>
            </td>
            <td data-label="Trigger-Based CDC">
              <span class="cell-indicator" aria-hidden="true">‚ö†Ô∏è</span>
              <span class="cell-text">Medium. Shadow/audit tables required.</span>
            </td>
            <td data-label="Query-Based CDC (Polling)">
              <span class="cell-indicator" aria-hidden="true">‚ö†Ô∏è</span>
              <span class="cell-text">High. Extra columns (timestamp/version/status).</span>
            </td>
          </tr>
          <tr class="recommended-row">
            <td><strong>Best For</strong></td>
            <td data-label="Log-Based CDC">
              <span class="cell-indicator" aria-hidden="true">‚≠ê</span>
              <span class="cell-text">High-volume, mission-critical systems needing high fidelity + low impact.</span>
            </td>
            <td data-label="Trigger-Based CDC">
              <span class="cell-indicator" aria-hidden="true">‚ö†Ô∏è</span>
              <span class="cell-text">Lower-volume systems or where log access is impossible.</span>
            </td>
            <td data-label="Query-Based CDC (Polling)">
              <span class="cell-indicator" aria-hidden="true">‚ö†Ô∏è</span>
              <span class="cell-text">Small, non-critical datasets or absolute last resort.</span>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <p>
      This visualization compares the 3 ways to implement CDC to help show why log-based CDC is the gold standard. Use the toggles below to see which method aligns with the priority you care about right now.
    </p>
    <div class="priority-chooser" id="priority-chooser" aria-live="polite">
      <h3>Match priorities to methods</h3>
      <p class="priority-note">Select a priority to highlight the CDC approach that best fits. We will also spotlight the matching card above.</p>
      <div class="priority-controls" role="tablist" aria-label="Pick a priority">
        <button type="button" role="tab" aria-selected="true" id="priority-tab-log" data-method="log" data-summary="Choose log-based CDC when you must minimize impact on the source database and need ordered, replayable change events." class="priority-btn is-active">Minimize source load</button>
        <button type="button" role="tab" aria-selected="false" id="priority-tab-trigger" data-method="trigger" data-summary="Use trigger-based CDC when you cannot access transaction logs but can accept additional OLTP overhead and manage per-table triggers." class="priority-btn">No log access</button>
        <button type="button" role="tab" aria-selected="false" id="priority-tab-polling" data-method="polling" data-summary="Fall back to polling when you need a quick proof-of-concept, can accept stale data, and will operationalize tombstones for deletes." class="priority-btn">Ship something fast</button>
      </div>
      <div class="priority-result" role="tabpanel" tabindex="0" aria-labelledby="priority-tab-log" data-selected="log">
        <h4 id="priority-method">Log-Based CDC</h4>
        <p id="priority-summary">Choose log-based CDC when you must minimize impact on the source database and need ordered, replayable change events.</p>
      </div>
    </div>
    <h2 id="core-components">Core components</h2>
    <p>
      The most common and robust architecture for a modern CDC pipeline
      combines a log-based capture mechanism with a scalable streaming
      platform.
    </p>
    <ul>
      <li>
        <strong>Source Database:</strong> Operational DB whose WAL/redo log
        records committed changes.
      </li>
      <li>
        <strong>CDC Connector:</strong> Debezium-like agent tails the log
        and emits structured change events.
      </li>
      <li>
        <strong>Streaming Platform / Message Bus:</strong> Kafka (or
        similar) decouples source from consumers.
      </li>
      <li>
        <strong>Schema Registry:</strong> Manages event schemas (Avro/JSON/Protobuf),
        enforces compatibility, and protects consumers during evolution.
      </li>
      <li>
        <strong>Downstream Consumers:</strong> Warehouse loaders, search
        indexers, caches, apps, etc.
      </li>
    </ul>

    <p class="core-components-links">
      Want the implementation details? <a href="/connector-builder/">Connector Builder</a> shows how log readers stream events, <a href="/schema-evolution/">Schema Evolution</a> covers contract management, and <a href="/merge-cookbook/">Merge Cookbook</a> demonstrates idempotent sink patterns.
    </p>

    <figure aria-label="CDC high-level flow">
      <svg viewBox="0 0 880 170" width="100%" role="img" aria-labelledby="cdcFlowT cdcFlowD"
        style="display: block; color: var(--accent-primary)">
        <title id="cdcFlowT">CDC high-level flow</title>
        <desc id="cdcFlowD">
          Source DB ‚Üí Log Reader/Agent ‚Üí Broker ‚Üí sinks (Warehouse,
          Search/Cache/Apps)
        </desc>
        <defs>
          <marker id="arrow" viewBox="0 0 10 10" refX="9" refY="5" markerWidth="10" markerHeight="10"
            orient="auto-start-reverse">
            <path d="M0,0 L10,5 L0,10 Z" fill="currentColor"></path>
          </marker>
          
        </defs>
        <rect class="node" x="30" y="40" width="150" height="70" rx="10" />
        <text class="label" x="105" y="80" text-anchor="middle">
          Source DB
        </text>
        <rect class="node" x="230" y="40" width="180" height="70" rx="10" />
        <text class="label" x="320" y="80" text-anchor="middle">
          Log Reader / Agent
        </text>
        <rect class="node" x="470" y="40" width="120" height="70" rx="10" />
        <text class="label" x="530" y="80" text-anchor="middle">
          Broker
        </text>
        <rect class="node" x="640" y="20" width="200" height="50" rx="10" />
        <text class="label" x="740" y="50" text-anchor="middle">
          Warehouse / Lake
        </text>
        <rect class="node" x="640" y="90" width="200" height="50" rx="10" />
        <text class="label" x="740" y="120" text-anchor="middle">
          Search / Cache / Apps
        </text>
        <path class="link" d="M180,75 L230,75" />
        <path class="link" d="M410,75 L470,75" />
        <path class="link" d="M590,75 L640,45" />
        <path class="link" d="M590,75 L640,115" />
      </svg>
      <figcaption class="figure-caption">
        Map the flow to deeper dives: Source DB ‚Üí <a href="/snapshotting/">Snapshotting</a>, Log Reader / Agent ‚Üí <a href="/connector-builder/">Connector Builder</a>, Broker ‚Üí <a href="/strategy/">Strategy</a>, and downstream sinks ‚Üí <a href="/merge-cookbook/">Merge Cookbook</a>.
      </figcaption>
    </figure>

    <section class="interactive-demo">
      <div>
        <h3>How log-based CDC keeps order and consistency</h3>
        <p>
          Log tailers capture changes in commit order (per transaction). By
          streaming these events to a durable bus, you keep a consistent,
          replayable history that downstream systems can apply idempotently.
        </p>
        <ol class="steps">
          <li>
            <strong>Capture</strong>
            Connector reads WAL/binlog entries in commit order, preserving
            per-key ordering.
          </li>
          <li>
            <strong>Transform</strong>
            Enrich with metadata (op, LSN/SCN, before/after images) and
            publish to topics.
          </li>
          <li>
            <strong>Deliver</strong>
            Topics are partitioned by key for ordering; consumers use MERGE
            (upsert) semantics to apply changes idempotently.
          </li>
        </ol>
      </div>
      <div>
        <h4>Key takeaways</h4>
        <ul>
          <li>Log-based CDC minimizes source load and captures all verb types.</li>
          <li>Downstream systems decide retention (history vs latest state).</li>
          <li>Replay is built-in: rewind offsets to rebuild a sink.</li>
        </ul>
      </div>
    </section>

    <section class="outbox" id="transactional-outbox">
      <div class="diagram-text">
        <h3>Transactional outbox in practice</h3>
        <p>
          Pair an application table write with an outbox insert in the same
          transaction. A relay tails the outbox table and publishes events to
          a broker topic. Consumers upsert idempotently.
        </p>
        <ol>
          <li>
            <strong>Write</strong>
            App writes business row + outbox row within the same database
            transaction.
          </li>
          <li>
            <strong>Publish</strong>
            Agent emits an event to the broker/topic reliably (at-least-once).
          </li>
          <li>
            <strong>Consume idempotently</strong>
            Consumers upsert/dedupe so replays are safe‚Äîproducing an ‚Äúexactly-once‚Äù
            <em>effect</em> at the sink. EOS scope is per sink/system, not global.
          </li>
        </ol>
        <details class="code-toggle">
          <summary>See a sample transaction and emitted event</summary>
          <div class="code-columns">
            <pre><code class="language-sql">BEGIN;
INSERT INTO orders (id, status, total, updated_at)
VALUES (:order_id, :status, :total, NOW());

INSERT INTO order_outbox (event_id, aggregate_id, aggregate_type, payload, created_at)
VALUES (gen_random_uuid(), :order_id, 'order', jsonb_build_object('op', 'c', 'status', :status, 'total', :total), NOW());
COMMIT;</code></pre>
            <pre><code class="language-json">{
  "event_id": "b2e03f62-3d0f-4b0e-9a6a-a52b8cfe9c51",
  "op": "c",
  "entity": {
    "id": "order-458",
    "status": "shipped",
    "total": 125.99
  },
  "lsn": "898799:4",
  "ts_ms": 1700000123456
}</code></pre>
          </div>
        </details>
        <p class="muted" style="margin: 0.5rem 0 0">
          Deep dive:
          <a href="/exactly-once/">Exactly-Once &amp; the Outbox pattern</a>.
        </p>
      </div>

      <figure class="diagram" aria-label="App & DB outbox to broker to consumer">
        <svg viewBox="0 0 520 180" role="img" style="
            display: block;
            width: 100%;
            height: auto;
            max-width: 440px;
            margin: 0.5rem auto 0;
            color: var(--accent-primary);
          ">
          <defs>
            <marker id="obArrow" viewBox="0 0 10 10" refX="9" refY="5" markerWidth="10" markerHeight="10"
              orient="auto-start-reverse">
              <path d="M0,0 L10,5 L0,10 Z" fill="currentColor"></path>
            </marker>
            
          </defs>
          <rect class="node" x="20" y="30" width="120" height="50" rx="8" />
          <text class="label" x="80" y="60" text-anchor="middle">
            App + DB
          </text>
          <rect class="node" x="180" y="30" width="120" height="50" rx="8" />
          <text class="label" x="240" y="60" text-anchor="middle">
            Outbox table
          </text>
          <rect class="node" x="340" y="30" width="150" height="50" rx="8" />
          <text class="label" x="415" y="60" text-anchor="middle">
            Broker/Topic
          </text>
          <rect class="node" x="340" y="110" width="150" height="50" rx="8" />
          <text class="label" x="415" y="140" text-anchor="middle">
            Consumer (UPSERT)
          </text>
          <path class="link" d="M140,55 L180,55" />
          <path class="link" d="M300,55 L340,55" />
          <path class="link" d="M415,80 L415,110" />
        </svg>
      </figure>
    </section>

    <h2 id="operational-gotchas">Operational gotchas (day-one checks)</h2>
    <ul class="operational-checklist">
      <li>
        <input type="checkbox" id="op-log">
        <label for="op-log">
          <span class="severity severity-must" aria-label="Must do">Must</span>
          <span class="item-text"><strong>Log retention &amp; bloat:</strong> Logical slots (PG) or paused connectors can block log truncation; size WAL/binlog/T-log appropriately and alert on backlog.</span>
        </label>
        <a class="checklist-link" href="/troubleshooting/">Troubleshooting playbook</a>
      </li>
      <li>
        <input type="checkbox" id="op-perms">
        <label for="op-perms">
          <span class="severity severity-must" aria-label="Must do">Must</span>
          <span class="item-text"><strong>Privileges &amp; network:</strong> Connectors need replication permissions and stable network paths (no NAT timeouts) to avoid stalls.</span>
        </label>
        <a class="checklist-link" href="/strategy/">Deployment checklist</a>
      </li>
      <li>
        <input type="checkbox" id="op-ddl">
        <label for="op-ddl">
          <span class="severity severity-should" aria-label="Should do">Should</span>
          <span class="item-text"><strong>DDL changes:</strong> Schema changes may need registry rules and phased rollouts to avoid breaking consumers.</span>
        </label>
        <a class="checklist-link" href="/schema-evolution/">Schema change guide</a>
      </li>
      <li>
        <input type="checkbox" id="op-sinks">
        <label for="op-sinks">
          <span class="severity severity-must" aria-label="Must do">Must</span>
          <span class="item-text"><strong>Sinks are the hard part:</strong> Upsert/delete semantics and idempotency in the warehouse/search system determine data correctness under replay.</span>
        </label>
        <a class="checklist-link" href="/merge-cookbook/">Merge &amp; upsert patterns</a>
      </li>
      <li>
        <input type="checkbox" id="op-observability">
        <label for="op-observability">
          <span class="severity severity-nice" aria-label="Nice to have">Nice</span>
          <span class="item-text">Instrument CDC-specific metrics (lag, slot depth, consumer replay time) so you can rehearse incident response without touching production.</span>
        </label>
        <a class="checklist-link" href="/tooling/">Observability tooling</a>
      </li>
    </ul>

    <h2>The CDC Tooling Ecosystem</h2>
    <p>
      Picking CDC tooling is a trade-off across
      <em>capture method</em> (prefer log-based), <em>ops model</em> (managed
      vs self-managed), <em>source/target coverage &amp; versions</em>, and
      <em>exactly-once behavior at the sink</em> (idempotent upserts +
      replay).
    </p>

    <section aria-labelledby="cdc-vendors-title" class="cdc-vendors">
      

      <h2 id="cdc-vendors-title">CDC platforms</h2>
      <div class="cdc-filter" role="region" aria-label="Filter CDC platforms">
        <div class="row">
          <input id="cdc-search" type="search" placeholder="Search platforms..."
                 aria-label="Search platforms" />
          <button id="cdc-reset" type="button">Reset</button>
          <span id="cdc-count" aria-live="polite"></span>
        </div>
        <div id="cdc-chips" class="row" role="toolbar" aria-label="Tag filters"></div>
      </div>
      <div class="cdc-grid" id="cdc-grid" role="list">
<!-- cards (unchanged) -->
          <article class="cdc-card" data-tags="open source,log-based,DIY ops" role="listitem">
            <h3>Debezium + Kafka Connect</h3>
            <p>
              Open-source log-based CDC connectors. Flexible; you operate
              Kafka/Connect or use managed Kafka.
            </p>
            <div class="meta">
              <span class="cdc-pill">open source</span><span class="cdc-pill">log-based</span><span class="cdc-pill">DIY
                ops</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="managed,log-based,ELT + orchestration" role="listitem">
            <h3>Matillion (Data Loader / Designer)</h3>
            <p>
              Wizard-driven CDC into cloud warehouses plus
              orchestration/transform in one place.
            </p>
            <div class="meta">
              <span class="cdc-pill">managed</span><span class="cdc-pill">log-based</span><span class="cdc-pill">ELT +
                orchestration</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="managed,log-based" role="listitem">
            <h3>Fivetran</h3>
            <p>
              Managed connectors with log-based CDC options; emphasizes quick
              setup and hands-off operations.
            </p>
            <div class="meta">
              <span class="cdc-pill">managed</span><span class="cdc-pill">log-based</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="enterprise,log-based,heterogeneous" role="listitem">
            <h3>Precisely (Connect)</h3>
            <p>
              Enterprise replication including mainframe/legacy into modern
              targets.
            </p>
            <div class="meta">
              <span class="cdc-pill">enterprise</span><span class="cdc-pill">log-based</span><span
                class="cdc-pill">heterogeneous</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="enterprise,log-based" role="listitem">
            <h3>Qlik Replicate (Attunity)</h3>
            <p>
              UI-driven enterprise CDC across a wide range of sources/targets.
            </p>
            <div class="meta">
              <span class="cdc-pill">enterprise</span><span class="cdc-pill">log-based</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="enterprise,log-based" role="listitem">
            <h3>Oracle GoldenGate</h3>
            <p>
              Oracle‚Äôs CDC/replication stack (supports several non-Oracle
              endpoints) for mission-critical use.
            </p>
            <div class="meta">
              <span class="cdc-pill">enterprise</span><span class="cdc-pill">log-based</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="managed,log-based" role="listitem">
            <h3>AWS DMS</h3>
            <p>
              Managed migrations and ongoing CDC into AWS targets (and beyond
              via connectors).
            </p>
            <div class="meta">
              <span class="cdc-pill">managed</span><span class="cdc-pill">log-based</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="serverless,log-based" role="listitem">
            <h3>Google Cloud Datastream</h3>
            <p>
              Serverless CDC for MySQL/Postgres/Oracle streaming into
              BigQuery/Cloud Storage.
            </p>
            <div class="meta">
              <span class="cdc-pill">serverless</span><span class="cdc-pill">log-based</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="commercial,log-based" role="listitem">
            <h3>Confluent Commercial Connectors</h3>
            <p>
              Kafka Connect ecosystem with additional commercial CDC connectors
              like Oracle.
            </p>
            <div class="meta">
              <span class="cdc-pill">commercial</span><span class="cdc-pill">log-based</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="platform,CDC connectors" role="listitem">
            <h3>StreamSets</h3>
            <p>
              Streaming pipelines with CDC connectors into warehouses/lakes.
            </p>
            <div class="meta">
              <span class="cdc-pill">platform</span><span class="cdc-pill">CDC connectors</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="platform,CDC + transform" role="listitem">
            <h3>Striim</h3>
            <p>
              CDC + in-flight SQL-like processing for real-time ops analytics.
            </p>
            <div class="meta">
              <span class="cdc-pill">platform</span><span class="cdc-pill">CDC + transform</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="enterprise,log-based" role="listitem">
            <h3>IBM Data Replication</h3>
            <p>
              Log-based CDC for Db2 and mixed mainframe/distributed estates.
            </p>
            <div class="meta">
              <span class="cdc-pill">enterprise</span><span class="cdc-pill">log-based</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="SAP,trigger/log" role="listitem">
            <h3>SAP SLT</h3>
            <p>
              Native trigger/log-based replication from SAP ECC/S/4HANA to
              downstream stores.
            </p>
            <div class="meta">
              <span class="cdc-pill">SAP</span><span class="cdc-pill">trigger/log</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="managed,CDC" role="listitem">
            <h3>Hevo Data</h3>
            <p>Managed ELT with CDC support into cloud targets.</p>
            <div class="meta">
              <span class="cdc-pill">managed</span><span class="cdc-pill">CDC</span>
            </div>
          </article>
          <article class="cdc-card" data-tags="open source,mixed CDC" role="listitem">
            <h3>Airbyte</h3>
            <p>
              Open-source ELT; CDC varies by connector (check docs for log-based
              maturity per source).
            </p>
            <div class="meta">
              <span class="cdc-pill">open source</span><span class="cdc-pill">mixed CDC</span>
            </div>
          </article>
      </div>
    </section>

    <section class="next-steps" id="choose-next" aria-labelledby="choose-next-title">
      <h2 id="choose-next-title">Choose your next step</h2>
      <p class="next-note">Pick the path that matches the momentum you want to keep.</p>
      <div class="next-grid">
        <article class="next-card">
          <h3><a href="/strategy/">Strategy blueprint</a></h3>
          <p>15 min ‚Äî Translate these fundamentals into a reference architecture and operating model.</p>
        </article>
        <article class="next-card">
          <h3><a href="/lab-kafka-debezium/">Hands-on lab</a></h3>
          <p>45 min ‚Äî Capture, stream, and replay changes with Kafka + Debezium in a guided exercise.</p>
        </article>
        <article class="next-card">
          <h3><a href="#cdc-vendors-title">Tooling directory</a></h3>
          <p>10 min ‚Äî Compare platforms and shortlist vendors aligned to your sources and targets.</p>
        </article>
      </div>
    </section>
  </article>
</div>
