---
layout: base.njk
description: Learn why Change Data Capture (CDC) projects fail and how to build scalable, reliable, and production-ready data pipelines. A deep-dive series.
eleventyComputed:
  head_extra: |
    <meta property="og:type" content="website">
    <meta property="og:url" content="{{ site.host }}{{ page.url }}">
    <meta property="og:title" content="CDC: The Missing Manual | A Deep Dive into Change Data Capture">
    <meta property="og:description" content="Learn why Change Data Capture (CDC) projects fail and how to build scalable, reliable, and production-ready data pipelines.">
    <meta property="og:image" content="{{ site.host }}/images/cdc-cover.jpg">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:url" content="{{ site.host }}{{ page.url }}">
    <meta name="twitter:title" content="CDC: The Missing Manual | A Deep Dive into Change Data Capture">
    <meta name="twitter:description" content="Learn why Change Data Capture (CDC) projects fail and how to build scalable, reliable, and production-ready data pipelines.">
    <meta name="twitter:image" content="{{ site.host }}/images/cdc-cover.jpg">
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "name": "CDC: The Missing Manual",
        "url": "{{ site.host }}{{ page.url }}",
        "inLanguage": "en"
      }
    </script>
---

{% import "components/ui.njk" as ui %}

{{ ui.hero(heroConfig) | safe }}
<section aria-labelledby="cdc-101" class="prose">
  <p>
    <strong>In the modern data landscape</strong>, the value of information is intrinsically linked to its timeliness. Decisions made on outdated data can lead to missed opportunities, inefficient operations, and a diminished competitive edge. This reality has exposed the limitations of traditional data integration methods like nightly batch jobs and paved the way for a more dynamic, real-time approach. This series shows you how to build production-grade CDC pipelines that deliver on the promise of real-time data.
  </p>
  <h2 id="cdc-101">What is Change Data Capture (CDC)?</h2>
  <p>
    <strong>Change Data Capture (CDC)</strong> is a set of software design patterns used to identify, capture, and deliver the changes made to data in a source system, most commonly a database. Instead of copying entire datasets at intervals, CDC focuses exclusively on incremental, row-level changes like INSERT, UPDATE, and DELETE operations. Once captured, these change events are delivered in real-time or near-real-time to downstream systems such as data warehouses, analytics platforms, or other applications that need to stay synchronized with the source data.
  </p>
  <figure class="cdc-flow-diagram" aria-label="A diagram showing the four stages of a Change Data Capture pipeline: Source Database, Transaction Log, a Broker like Kafka, and Sink Systems.">
    <div class="flow-step">
      <div class="step-icon db-icon"></div>
      <figcaption>1. Source DB</figcaption>
    </div>
    <div class="flow-arrow">&#10230;</div>
    <div class="flow-step">
      <div class="step-icon log-icon"></div>
      <figcaption>2. Transaction Log</figcaption>
    </div>
    <div class="flow-arrow">&#10230;</div>
    <div class="flow-step">
      <div class="step-icon stream-icon"></div>
      <figcaption>3. Broker / Stream</figcaption>
    </div>
    <div class="flow-arrow">&#10230;</div>
    <div class="flow-step">
      <div class="step-icon sink-icon"></div>
      <figcaption>4. Sinks</figcaption>
    </div>
  </figure>
  <h3>How it works (at a glance)</h3>
  <ol>
    <li><strong>Source DB</strong> writes to its transaction log.</li>
    <li><strong>Log reader/agent</strong> tails the log and emits change events.</li>
    <li><strong>Broker/stream</strong> transports events (Kafka).</li>
    <li><strong>Sinks</strong> consume and apply changes (MERGE/UPSERT).</li>
  </ol>
  <h3 id="analogy">A Tale of Two Worlds: Batch vs. Real-Time</h3>
  <p>
    To understand the paradigm shift that CDC represents, consider the difference between a daily newspaper and a live, streaming news feed.
  </p>
  <ul>
    <li>
      <strong>The Daily Batch:</strong> You get the full story once a day. The information was accurate when printed, but by the time it reaches you, it’s already half a day old. In many business scenarios—fraud detection, inventory management, personalization—this delay is unacceptable.
    </li>
    <li>
      <strong>The Real-Time Feed:</strong> Updates stream in continuously, allowing organizations to respond to events as they happen. CDC enables this by capturing each change event and propagating it without waiting for a batch window.
    </li>
  </ul>
  <p>
    CDC shifts the conversation from <em>“How often do we sync?”</em> to <em>“How quickly can we respond?”</em> When done right, it becomes the backbone of resilient streaming architectures, flexible data platforms, and responsive user experiences.
  </p>
</section>
<section aria-labelledby="glossary" class="prose">
  <h2 id="glossary">Glossary</h2>
  <ul>
    <li><strong>WAL/redo log:</strong> append-only record of committed DB changes.</li>
    <li><strong>LSN/SCN:</strong> monotonically increasing sequence used for checkpoints.</li>
    <li><strong>Tombstone:</strong> delete event with key so sinks can remove a row.</li>
    <li><strong>Idempotent write:</strong> repeated apply yields the same state (keyed <code>MERGE</code>).</li>
    <li><strong>Lag:</strong> time from source commit → sink apply (track p50/p95/p99).</li>
  </ul>
</section>
<section aria-labelledby="learn" class="prose learn">
  <section id="learning-path">
    <h2 class="section-title">What You'll Learn</h2>
    <p>
      Follow our structured learning path to build a comprehensive understanding of Change Data Capture, from core concepts to advanced, real-world implementation.
    </p>
    <div class="learning-modules">
      {% for module in learningModules %}
        {{ ui.module_card(module) | safe }}
      {% endfor %}
    </div>
  </section>
</section>
