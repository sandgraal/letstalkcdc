---
layout: base.njk
title: "Acceptance Tests — Kafka + Debezium Lab | CDC: The Missing Manual"
description: "Run acceptance tests for the Kafka + Debezium lab: stack up, connector healthy, topic has change events, and (optional) chaos smoke."
canonicalPath: "/tests/"
seriesKey: 'tests'
head_extra: |
  <meta
        name="description"
        content="Run acceptance tests for the Kafka + Debezium lab: stack up, connector healthy, topic has change events, and (optional) chaos smoke."
      />
      <link rel="stylesheet" href="{{ '/assets/css/pages/tests.css' | url }}">

---
{% import "components/ui.njk" as ui %}

{{ ui.hero({
  title: 'Acceptance Tests — Kafka + Debezium Lab',
  description: '<p>Run copy/paste scripts on your machine to prove the lab stack is healthy: containers up, connector RUNNING, topics streaming events, and restarts staying idempotent.</p>',
  align: 'left',
  actions: [
    { href: '/quickstarts/', label: 'Back to Quickstarts', variant: 'ghost' }
  ]
}) | safe }}

      <section class="box">
        <h2>What You’ll Run</h2>
        <ul class="filelist">
          <li>
            <span class="pill">scripts/test_stack.sh</span> — Zookeeper, Broker,
            Connect, PG are running & Connect REST is reachable
          </li>
          <li>
            <span class="pill">scripts/test_connector.sh</span> — Connector
            exists and is <strong class="ok">RUNNING</strong>
          </li>
          <li>
            <span class="pill">scripts/test_events.sh</span> — Topic has data;
            consumed messages parse as JSON and include <code>op</code> ∈
            {c,u,d}
          </li>
          <li>
            <span class="pill">scripts/test_chaos_smoke.sh</span>
            <span class="small">(optional)</span> — Latest offsets increase
            after a controlled connector restart
          </li>
        </ul>
        <p class="muted small">
          Requirements: <code>docker</code>, <code>docker compose</code>,
          <code>curl</code>, <code>jq</code>. Windows users: run under
          <a href="https://learn.microsoft.com/windows/wsl/install">WSL</a> or
          Git Bash.
        </p>
      </section>

      <section class="grid">
        <div class="box">
          <h2>Run Them (Mac/Linux + WSL)</h2>
          <pre><code>chmod +x scripts/*.sh
bash scripts/test_stack.sh
bash scripts/test_connector.sh
bash scripts/test_events.sh
# optional:
bash scripts/test_chaos_smoke.sh</code></pre>
          <p class="muted small">
            Expect green checks (✅). Any ❌ includes the failing step so you
            know what to fix.
          </p>
        </div>
        <div class="box">
          <h2>Windows (PowerShell via WSL)</h2>
          <ol>
            <li>Open “Ubuntu (WSL)”</li>
            <li>
              <code>cd</code> into the lab folder you mounted (
              <code>/mnt/c/Users/you/lab</code>)
            </li>
            <li>Run the same <code>bash</code> commands as left</li>
          </ol>
          <p class="muted small">
            Native PowerShell can work if you have Git Bash; otherwise use WSL.
          </p>
        </div>
      </section>

      <section class="manual-tests" aria-labelledby="manual-tests">
        <h2 id="manual-tests">Manual Data Checks &amp; Ops Tests</h2>
        <p class="muted">Quick sanity checks that aren’t scripted but catch the common footguns before you ship.</p>
        <div class="grid manual-tests__grid">
          <div class="box">
            <h3>Duplicate primary keys (generic SQL)</h3>
            <pre><code>-- replace table/pk
SELECT COUNT(*) AS rows, COUNT(DISTINCT pk) AS distinct_keys
FROM target_table;  -- expect rows == distinct_keys</code></pre>
            <h3>Latest-wins check (history vs target)</h3>
            <pre><code>-- adapt names: business key + timestamp/version
WITH last AS (
  SELECT key_col, MAX(op_ts) AS last_ts
  FROM history_table
  GROUP BY key_col
)
SELECT COUNT(*) AS stale
FROM target_table t
JOIN last l ON t.key_col = l.key_col
WHERE t.op_ts &lt; l.last_ts;   -- expect 0</code></pre>
            <h3>Dead-letter queue sanity (Kafka)</h3>
            <pre><code># adjust topic; e.g. "dlq.inventory"
kafka-console-consumer --bootstrap-server localhost:29092 \
  --topic dlq.inventory --from-beginning --timeout-ms 4000 \
  --max-messages 10 | jq -C .</code></pre>
          </div>
          <div class="box">
            <h3>Connector status (Kafka Connect REST)</h3>
            <pre><code>curl -s http://localhost:8083/connectors | jq
curl -s http://localhost:8083/connectors/&lt;name&gt;/status | jq</code></pre>
            <h3>Consumer lag (sink group)</h3>
            <pre><code>kafka-consumer-groups --bootstrap-server localhost:29092 \
  --describe --group &lt;your-sink-group&gt;</code></pre>
            <h3>Topic offsets (sum across partitions)</h3>
            <pre><code># inside the broker container (or use PLAINTEXT_HOST localhost:29092 externally)
docker exec -it broker kafka-run-class kafka.tools.GetOffsetShell \
  --broker-list localhost:9092 --topic &lt;topic&gt; --time -1</code></pre>
          </div>
        </div>
        <p class="muted small">Tip: run these after a controlled connector restart to confirm idempotency — no dupes, no stale rows, offsets advancing.</p>
      </section>

      <section class="box callout">
        <h2>Customizing (if your names differ)</h2>
        <p>Override env vars inline:</p>
        <pre><code>CONNECT_URL=http://connect:8083 \
CONNECTOR_NAME=my-connector \
TOPIC=my.db.my_table \
bash scripts/test_events.sh</code></pre>
        <p class="muted small">
          Defaults are <code>CONNECT_URL=http://localhost:8083</code>,
          <code>CONNECTOR_NAME=inventory-connector</code>,
          <code>TOPIC=server1.public.app_customer</code>.
        </p>
      </section>

      <section class="box">
        <h2>What “Pass” Means</h2>
        <ul>
          <li>
            <strong>Stack</strong>: All containers are up and Connect’s REST API
            responds
          </li>
          <li>
            <strong>Connector</strong>: The named source connector is RUNNING
            with at least one RUNNING task
          </li>
          <li>
            <strong>Events</strong>: The Debezium topic has data and you can
            parse JSON records with <code>op=c/u/d</code>
          </li>
          <li>
            <strong>Chaos Smoke</strong>: After a connector restart, the topic’s
            latest offset increases (someone is producing / the source didn’t
            wedge)
          </li>
        </ul>
      </section>

      <section class="box">
        <h2>Troubleshooting Quickies</h2>
        <ul>
          <li class="no">
            <strong>No messages consumed</strong>: Generate a change in
            <code>app.customer</code> (insert/update/delete), then re-run
            <code>test_events.sh</code>
          </li>
          <li class="no">
            <strong>Connector not found</strong>: Register it (see lab step
            “register the connector”), or set <code>CONNECTOR_NAME</code>
          </li>
          <li class="no">
            <strong>Timeouts</strong>: Ensure Docker is running;
            <code>docker compose ps</code> should show 4 services up
          </li>
          <li class="no">
            <strong>Permission denied</strong>: Run
            <code>chmod +x scripts/*.sh</code> once
          </li>
        </ul>
      </section>
