---
layout: base.njk
title: "extras — quickstarts, tests, and tools"
canonicalPath: "/everything-else/"
head_extra: |
  <meta content="extras hub: quickstarts for Postgres/MySQL/Oracle, acceptance tests, manual data checks, and tools like a Mermaid diagram sandbox." name="description"/>
  <link rel="stylesheet" href="/assets/css/pages/everything-else.css">
  <link href="https://letstalkcdc.nfshost.com/everything-else/" rel="canonical"/>
---
{% import "components/ui.njk" as ui %}

<!-- QUICKSTARTS -->
<section aria-label="quickstarts" class="section">
<h2>quickstarts</h2>
<div class="grid">
{% for card in quickstartCards %}
  {{ ui.catalog_card(card) | safe }}
{% endfor %}
</div>
</section>
<!-- SCRIPTED ACCEPTANCE TESTS -->
<section aria-label="acceptance tests" class="section">
<h2>acceptance tests (shell)</h2>
<p class="muted">prove your lab is healthy with one-liners. these run on your machine (or CI) and check: stack up, connector running, events flowing, and (optional) offsets after restart.</p>
{% if acceptanceLinks %}
  {{ ui.download_links(acceptanceLinks, 'acceptance test resources') }}
{% endif %}
<pre><code>chmod +x scripts/*.sh
bash scripts/test_stack.sh
bash scripts/test_connector.sh
bash scripts/test_events.sh
# optional:
bash scripts/test_chaos_smoke.sh</code></pre>
</section>
<!-- MANUAL DATA CHECKS & OPS TESTS (not covered by scripts) -->
<section aria-label="manual tests" class="section">
<h2>manual data checks &amp; ops tests</h2>
<p class="muted">quick sanity tests that aren’t in the <code>scripts/</code> folder but are essential for validation and triage.</p>
<div class="two">
<div>
<h3>duplicate primary keys (generic SQL)</h3>
<pre><code>-- replace table/pk
SELECT COUNT(*) AS rows, COUNT(DISTINCT pk) AS distinct_keys
FROM target_table;  -- expect rows == distinct_keys</code></pre>
<h3>latest-wins check (history vs target)</h3>
<pre><code>-- adapt names: business key + timestamp/version
WITH last AS (
  SELECT key_col, MAX(op_ts) AS last_ts
  FROM history_table
  GROUP BY key_col
)
SELECT COUNT(*) AS stale
FROM target_table t JOIN last l ON t.key_col = l.key_col
WHERE t.op_ts &lt; l.last_ts;   -- expect 0</code></pre>
<h3>dead-letter queue sanity (Kafka)</h3>
<pre><code># adjust topic; you used "dlq.inventory" in connector.json
kafka-console-consumer --bootstrap-server localhost:29092 \
  --topic dlq.inventory --from-beginning --timeout-ms 4000 \
  --max-messages 10 | jq -C .</code></pre>
</div>
<div>
<h3>connector status (Kafka Connect REST)</h3>
<pre><code>curl -s http://localhost:8083/connectors | jq
curl -s http://localhost:8083/connectors/&lt;name&gt;/status | jq</code></pre>
<h3>consumer lag (sink group)</h3>
<pre><code>kafka-consumer-groups --bootstrap-server localhost:29092 \
  --describe --group &lt;your-sink-group&gt;</code></pre>
<h3>topic offsets (sum across partitions)</h3>
<pre><code># inside the broker container (or use PLAINTEXT_HOST localhost:29092 externally)
docker exec -it broker kafka-run-class kafka.tools.GetOffsetShell \
  --broker-list localhost:9092 --topic &lt;topic&gt; --time -1</code></pre>
</div>
</div>
<p class="muted">tip: run these after a controlled connector restart to confirm idempotency (no dupes, no stale rows, offsets advancing).</p>
</section>
<!-- TOOLS & VENDOR NOTES -->
<section aria-label="tools and notes" class="section">
<h2>tools &amp; vendor notes</h2>
<div class="grid">
{% for card in toolCards %}
  {{ ui.catalog_card(card) | safe }}
{% endfor %}
</div>
</section>
