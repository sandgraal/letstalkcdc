---
layout: base.njk
title: "MySQL CDC Quickstart | CDC: The Missing Manual"
description: "MySQL CDC quickstart: prerequisites, connector config, verification, acceptance tests, and rollback."
canonicalPath: "/quickstarts/quickstart-mysql/"
permalink: quickstarts/quickstart-mysql/index.html
head_extra: |
  <link rel="stylesheet" href="{{ '/assets/css/pages/quickstart-shared.css' | url }}">
---
{% import "components/ui.njk" as ui %}

{{ ui.hero(heroConfig) | safe }}

<div class="page-wrap prose">
  <section class="box">
    <h2>Prerequisites (DB)</h2>
    <ul class="checklist">
      <li>
        <strong>binlog_format=ROW</strong> with <strong>binlog_row_image</strong> FULL or MINIMAL per connector support.
      </li>
      <li>GTID mode preferred (<code>gtid_mode=ON</code>).</li>
      <li>Binlog retention window â‰¥ snapshot + catch-up time.</li>
      <li>Stable primary keys (or sink logic that can reconcile keyless tables).</li>
    </ul>
    <ul class="checklist">
      <li>
        <code>binlog_format=ROW</code> captures per-row changes for high-fidelity CDC. <code>binlog_row_image</code> controls how much data is logged, and <code>gtid_mode=ON</code> simplifies failover by uniquely identifying each transaction across replicas.
      </li>
    </ul>
    <pre><code>SHOW VARIABLES LIKE 'binlog_format';
SHOW VARIABLES LIKE 'binlog_row_image';
SHOW VARIABLES LIKE 'gtid_mode';
SHOW MASTER STATUS;
SHOW VARIABLES LIKE 'binlog_expire_logs_seconds';</code></pre>
  </section>

  <section class="grid">
    <div class="box">
      <h2>DB Setup (copy/paste)</h2>
      <pre><code># my.cnf (server)
binlog_format = ROW
binlog_row_image = FULL
server_id = 1
gtid_mode = ON
enforce_gtid_consistency = ON

# grant minimal privileges to CDC user
GRANT REPLICATION SLAVE, REPLICATION CLIENT, SELECT ON *.*
  TO 'cdc'@'%' IDENTIFIED BY 'cdc';</code></pre>
    </div>
    <div class="box">
      <h2>Connector Config (example)</h2>
      <pre><code>{
  "name": "mysql-cdc",
  "config": {
    "connector.class": "io.debezium.connector.mysql.MySqlConnector",
    "database.hostname": "mysql",
    "database.port": "3306",
    "database.user": "cdc",
    "database.password": "cdc",
    "database.server.id": "5400",
    "topic.prefix": "server1",
    "database.include.list": "app",
    "table.include.list": "app.customer",
    "tombstones.on.delete": "false",
    "include.schema.changes": "false",
    "snapshot.mode": "initial",
    "errors.tolerance": "all",
    "errors.deadletterqueue.topic.name": "dlq.mysql"
  }
}</code></pre>
    </div>
  </section>

  <section class="grid">
    <div class="box">
      <h2>Verify</h2>
      <pre><code>-- generate a change
UPDATE app.customer SET email = CONCAT(email, '.x')
WHERE id = (SELECT id FROM app.customer LIMIT 1);

-- confirm binlog advancing
SHOW MASTER STATUS;
-- topic should receive a record for app.customer</code></pre>
      <pre><code>kafka-console-consumer --bootstrap-server localhost:29092 \
  --topic server1.app.customer --from-beginning --max-messages 5</code></pre>
    </div>
    <div class="box">
      <h2>Acceptance (target/sink)</h2>
      <ul class="checklist">
        <li>No duplicate PKs after connector restart.</li>
        <li>Latest-wins per key using <code>op_ts/version</code>.</li>
      </ul>
      <pre><code>SELECT COUNT(*) AS rows, COUNT(DISTINCT id) AS distinct_keys
FROM target_customers;</code></pre>
    </div>
  </section>

  <section class="box">
    <h2>Safe Rollback</h2>
    <p>
      Stop the connector; keep binlogs until you are sure downstream systems are consistent. If you must prune logs, confirm all consumers are caught up first.
    </p>
  </section>
</div>
