---
layout: base.njk
title: "Postgres CDC Quickstart | CDC: The Missing Manual"
description: "Postgres CDC quickstart: prerequisites, connector config, verification, acceptance tests, and safe rollback."
canonicalPath: "/quickstarts/quickstart-postgres/"
permalink: quickstarts/quickstart-postgres/index.html
head_extra: |
  <link rel="stylesheet" href="/assets/css/pages/quickstart-shared.css">
heroConfig:
  title: "Postgres CDC — Quickstart & Runbook"
  description: |
    <p>Set the right DB knobs, register a connector, verify changes, and know how to roll back safely.</p>
  align: left
  actions:
    - href: "/quickstarts/"
      label: "Back to Quickstarts"
      variant: "ghost"
---
{% import "components/ui.njk" as ui %}

{{ ui.hero(heroConfig) | safe }}

<div class="page-wrap prose">
  <section class="box">
    <h2>Prerequisites (DB)</h2>
    <ul class="checklist">
      <li>
        <strong>wal_level=logical</strong>, slots allowed, publication permissions. This enables logical decoding so Debezium can stream row-level changes from the transaction log. It also keeps logical replication slots consistent for downstream consumers.
      </li>
      <li>
        Tables have a stable primary key (or configure <code>REPLICA IDENTITY FULL</code> for keyless tables).
      </li>
      <li>WAL retention window ≥ snapshot + catch-up time.</li>
    </ul>
    <pre><code>SHOW wal_level;
SHOW max_replication_slots;
SHOW max_wal_senders;
SELECT current_setting('wal_keep_size');</code></pre>
  </section>

  <section class="grid">
    <div class="box">
      <h2>DB Setup (copy/paste)</h2>
      <pre><code>-- minimal role for logical replication (adjust as needed)
CREATE ROLE cdc LOGIN PASSWORD 'cdc' REPLICATION;

-- ensure replica identity for keyless tables (example)
ALTER TABLE app.customer REPLICA IDENTITY FULL;

-- create publication if you prefer manual management
CREATE PUBLICATION cdc_pub FOR TABLE app.customer;</code></pre>
      <p class="muted">
        Debezium can auto-create a filtered publication; configure manually if you need tighter scope.
      </p>
    </div>
    <div class="box">
      <h2>Connector Config (example)</h2>
      <pre><code>{
  "name": "pg-cdc",
  "config": {
    "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
    "database.hostname": "pg",
    "database.port": "5432",
    "database.user": "cdc",
    "database.password": "cdc",
    "database.dbname": "postgres",
    "slot.name": "cdc_slot",
    "publication.autocreate.mode": "filtered",
    "schema.include.list": "app",
    "table.include.list": "app.customer",
    "tombstones.on.delete": "false",
    "heartbeat.interval.ms": "5000",
    "include.schema.changes": "false",
    "decimal.handling.mode": "string",
    "snapshot.mode": "initial",
    "errors.tolerance": "all",
    "errors.deadletterqueue.topic.name": "dlq.pg"
  }
}</code></pre>
    </div>
  </section>

  <p class="muted">
    Logical replication slots are persistent queue-like structures that reserve WAL segments until consumers confirm they have processed them, ensuring no data loss and keeping replay consistent for CDC tools.
  </p>

  <section class="grid">
    <div class="box">
      <h2>Verify</h2>
      <pre><code>-- slot & publication health
SELECT slot_name, active, restart_lsn, confirmed_flush_lsn
FROM pg_replication_slots WHERE slot_name='cdc_slot';

SELECT * FROM pg_publication_tables WHERE pubname='cdc_pub';

-- generate a change
UPDATE app.customer SET email = email || '.x' WHERE id = (
  SELECT id FROM app.customer LIMIT 1
);</code></pre>
      <pre><code># consume from the topic (adjust name)
kafka-console-consumer --bootstrap-server localhost:29092 \
  --topic server1.public.app_customer --from-beginning --max-messages 5</code></pre>
    </div>
    <div class="box">
      <h2>Acceptance (target/sink)</h2>
      <ul class="checklist">
        <li>No duplicate PKs after a connector restart.</li>
        <li>Per key, the row reflects the greatest <code>op_ts/version</code>.</li>
        <li>DLQ empty or only expected test errors.</li>
      </ul>
      <pre><code>-- duplicates (generic)
SELECT COUNT(*) AS rows, COUNT(DISTINCT id) AS distinct_keys
FROM target_customers;</code></pre>
    </div>
  </section>

  <section class="box">
    <h2>Safe Rollback</h2>
    <pre><code>-- stop connector first (to avoid slot churn)
-- then, if you must remove the slot:
SELECT pg_drop_replication_slot('cdc_slot');</code></pre>
    <p class="muted">
      Dropping a live slot can force WAL recycling and data loss for downstream readers. Pause, plan a snapshot, then drop.
    </p>
  </section>
</div>
