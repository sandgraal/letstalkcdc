---
layout: null
permalink: quickstarts/quickstart-postgres/index.html
---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Postgres CDC Quickstart | CDC: The Missing Manual</title>
    <meta
      name="description"
      content="Postgres CDC quickstart: prerequisites, connector config, verification, acceptance tests, and safe rollback."
    />
    <!-- Corrected path for styles.css -->
    <link rel="stylesheet" href="/assets/css/styles.css" />
    <link rel="stylesheet" href="/assets/css/pages/quickstart-shared.css" />
    <link
      rel="canonical"
      href="https://letstalkcdc.nfshost.com/quickstarts/quickstart-postgres/"
    />
  </head>
  <body>
    <a class="skip-link" href="#main">Skip to content</a>
    <header class="global-header">
      <div class="nav-container">
        <a class="site-title" href="/"
          >CDC: The Missing Manual | A Deep Dive into Change Data Capture</a
        >
        <div class="nav-right">
          <nav aria-label="Primary" class="nav-links">
            <a href="/">Home</a>
            <a href="/overview/" class="active">The Series</a>
          </nav>
          <button
            aria-label="Toggle dark mode"
            class="theme-toggle"
            data-toggle-theme
            type="button"
          >
            üåì
          </button>
        </div>
      </div>
    </header>

    <main id="main" class="prose">
      <a href="/quickstarts/" class="back-link"
        >‚Üê Back to all Quickstarts</a
      >
      <h1>Postgres CDC ‚Äî Quickstart & Runbook</h1>
      <p class="muted">
        Set the right DB knobs, register a connector, verify changes, and know
        how to roll back safely.
      </p>

      <section class="box">
        <h2>Prerequisites (DB)</h2>
        <ul class="check">
          <li>
            <strong>wal_level=logical</strong>, slots allowed, publication
            permissions. This setting enables logical decoding, which allows
            external tools like Debezium to stream row-level changes from the
            transaction log. It also supports logical replication slots, which
            provide a persistent, ordered stream of changes and manage WAL
            retention for consumers."
          </li>
          <li>
            Tables have a stable primary key (or set
            <code>REPLICA IDENTITY FULL</code> for keyless)
          </li>
          <li>WAL retention window ‚â• snapshot + catch-up time</li>
        </ul>
        <pre><code>SHOW wal_level;
SHOW max_replication_slots;
SHOW max_wal_senders;
SELECT current_setting('wal_keep_size');</code></pre>
      </section>

      <section class="grid">
        <div class="box">
          <h2>DB Setup (copy/paste)</h2>
          <pre><code>-- minimal role for logical replication (adjust as needed)
CREATE ROLE cdc LOGIN PASSWORD 'cdc' REPLICATION;

-- ensure replica identity for keyless tables (example)
ALTER TABLE app.customer REPLICA IDENTITY FULL;

-- create publication if you prefer manual management
CREATE PUBLICATION cdc_pub FOR TABLE app.customer;</code></pre>
          <p class="muted">
            If using Debezium, you can let it auto-create a filtered
            publication.
          </p>
        </div>
        <div class="box">
          <h2>Connector Config (example)</h2>
          <pre><code>{
  "name": "pg-cdc",
  "config": {
    "connector.class": "io.debezium.connector.postgresql.PostgresConnector",
    "database.hostname": "pg",
    "database.port": "5432",
    "database.user": "cdc",
    "database.password": "cdc",
    "database.dbname": "postgres",
    "slot.name": "cdc_slot",
    "publication.autocreate.mode": "filtered",
    "schema.include.list": "app",
    "table.include.list": "app.customer",
    "tombstones.on.delete": "false",
    "heartbeat.interval.ms": "5000",
    "include.schema.changes": "false",
    "decimal.handling.mode": "string",
    "snapshot.mode": "initial",
    "errors.tolerance": "all",
    "errors.deadletterqueue.topic.name": "dlq.pg"
  }
}</code></pre>
        </div>
      </section>
      <p class="muted">
        Logical replication slots are persistent queue-like structures that
        reserve WAL segments until a consumer confirms it has processed them,
        ensuring no data loss and maintaining read consistency for CDC tools.
      </p>
      <section class="grid">
        <div class="box">
          <h2>Verify</h2>
          <pre><code>-- slot & publication health
SELECT slot_name, active, restart_lsn, confirmed_flush_lsn
FROM pg_replication_slots WHERE slot_name='cdc_slot';

SELECT * FROM pg_publication_tables WHERE pubname='cdc_pub';

-- generate a change
UPDATE app.customer SET email = email || '.x' WHERE id = (SELECT id FROM app.customer LIMIT 1);</code></pre>
          <pre><code># consume from the topic (adjust name)
kafka-console-consumer --bootstrap-server localhost:29092 \
  --topic server1.public.app_customer --from-beginning --max-messages 5</code></pre>
        </div>
        <div class="box">
          <h2>Acceptance (target/sink)</h2>
          <ul class="check">
            <li>No duplicate PKs after a connector restart</li>
            <li>
              Per key, the row reflects the greatest <code>op_ts/version</code>
            </li>
            <li>DLQ empty or only expected test errors</li>
          </ul>
          <pre><code>-- duplicates (generic)
SELECT COUNT(*) rows, COUNT(DISTINCT id) distinct_keys FROM target_customers;</code></pre>
        </div>
      </section>

      <section class="box">
        <h2>Safe Rollback</h2>
        <pre><code>-- stop connector first (to avoid slot churn)
-- then, if you must remove the slot:
SELECT pg_drop_replication_slot('cdc_slot');</code></pre>
        <p class="muted">
          Dropping a live slot can force WAL recycling and data loss for
          downstream readers. Pause, plan a snapshot, then drop.
        </p>
      </section>
    </main>

    <footer class="site-footer">
      <p>
        ¬© 2025 Christopher Ennis. A deep dive into the world of Change Data
        Capture.
      </p>
    </footer>

    <script type="module" src="/assets/js/app.js"></script>
  </body>
</html>
