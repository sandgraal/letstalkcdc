# -------------------------

# Long-term caching (with cache-busting filenames)

# -------------------------

<FilesMatch "\.(css|js|mjs|woff2|woff|ttf|otf|eot|png|jpg|jpeg|gif|webp|avif|svg)$">
Header set Cache-Control "public, max-age=31536000, immutable"
</FilesMatch>

# HTML gets short cache (so content updates show quickly)

<FilesMatch "\.(html)$">
Header set Cache-Control "no-cache"
</FilesMatch>

# Gzip/Brotli (if modules are available)

<IfModule mod_deflate.c>
  AddOutputFilterByType DEFLATE text/css application/javascript text/javascript application/json image/svg+xml
</IfModule>
<IfModule mod_brotli.c>
  AddOutputFilterByType BROTLI_COMPRESS text/css application/javascript text/javascript application/json image/svg+xml
</IfModule>

# Proper content types for SVG/WOFF2 (prevents oddities)

AddType image/svg+xml .svg
AddType font/woff2 .woff2

# CORS for fonts if ever served cross-origin (harmless on same origin)

<FilesMatch "\.(woff2|woff|ttf|otf|eot)$">
Header set Access-Control-Allow-Origin "\*"
</FilesMatch>

# -------------------------

# Security & best practices

# -------------------------

# Prevent MIME sniffing

Header set X-Content-Type-Options "nosniff"

# Clickjacking protection

Header always set X-Frame-Options "DENY"

# Basic Referrer policy

Header always set Referrer-Policy "strict-origin-when-cross-origin"

# Permissions policy (disable sensitive APIs by default)

Header always set Permissions-Policy "camera=(), geolocation=(), microphone=()"

# Cross-origin isolation (optional; only if you know you need it)

# Header always set Cross-Origin-Opener-Policy "same-origin"

# Header always set Cross-Origin-Resource-Policy "same-origin"

# HSTS (enable only if your site is 100% HTTPS and stable on HTTPS!)

# Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

# Content Security Policy (start in report-only if unsure)

Header always set Content-Security-Policy "default-src 'self'; script-src 'self' https://cdn.jsdelivr.net 'sha256-UqRoBbsMobLx+AJ5aa2GvRl162/JYGFahsy/vdVTEUc=' 'sha256-YE4lRDv4PtpfbwWSC0+WrKvtQI5hEor18U6Z3WDOYKc=' 'sha256-j0bsxTo5pzTsqW88IWVyCj/DeXteMkNIaWFoDpX0a24=' 'sha256-wogpQhnU47sLw2vyo2qfIsdPeuYUFDQpTaB0o1FSUlw=' 'sha256-aznvpzfKSt619BCGU8ULTnOcGLNfS82dFVul/vovqIs=' 'sha256-fTCjUsro94hiY7Bv0Qot4oXI76PmXP5gmfHpQoXk36w=' 'sha256-EefZU0UtzhD91nzTAIkqGmNrCBK+Zuj2iKFsNehdzjs=' 'sha256-wKWhRPlhYUh+4oD1K4J7ycoyBRwpjQz1mLQu8t3ZzfY=' 'sha256-DEbbx9IgGsbUJPoisAs9Vd1hbvkMJuEsCHQF8dpoIMk='; style-src 'self' 'sha256-0SO4SB0CMTQpLKI7mcW6YU4Rh0QleekIw504fYxM0QQ=' 'sha256-JR4pfp615oJLZAa7cijo4KhqUrwpETWbWbg4gC1X770=' 'sha256-WBGrEyYS0ve9CY53pBp/efNo2MToeLz/KZLPJAgLAVs=' 'sha256-CjJ8MoVmlLgTjiF6w52XjVQEq3hPwOrHjBzXFaksjJ8=' 'sha256-GYx12iHJhuWDFpTRhRfg6GqHaUrAFjMEE8bqDB+XBzQ=' 'sha256-tKLHQd9CLq0ue+Y2SvtOiI/Uf/cucZ9ZFqjB2H/+rUo=' 'sha256-hFbs2CUMRkyjQlrxzNah/4634P9BpnUm7/WCljt34v4=' 'sha256-iJy27FHFl+4RPHvdrRxIvUDSw/FaFQD0OgWZx82tJJQ=' 'sha256-WmxS6cdt22J9NLoJnVDB+WOJM+DO8K9LWoEmvf2RjCg=' 'sha256-rSo8t2x/MGIzkGtOqZs3/N6UQa6p7hoYHdqbG8mONP4=' 'sha256-MojonTGpGyKDecwkf8btW657zWH9V4c0lOQdKFpqfUA=' 'sha256-5RmXiTQcbJYzbZ6PRzL+tIcucatJhCKbc+XpwCs17hI=' 'sha256-DE3JHRwlDzBfaMYWnudPNgU2M3GO179WQvbzMjLt/uk=' 'sha256-V1+lVn8drn6Bqut5CmHebtdY3NZj3gabmj/lO2mjhrc=' 'sha256-EI5wwqBfurgNh65iMtcFX4oSaYexdAWGnmCL8bXyzfI=' 'sha256-N2LFLlwR72ddAksk8Qci7lh94DKlhaYkeqEbuSiwtd0=' 'sha256-Jr+R1wXVJp9PNrnJ1fypmQB6iuiKuRMOI2fe93IRJBA=' 'sha256-vrBtMErf7qjh8ubsGU+Y9jaOLadg8BDjajTahmXzRn4=' 'sha256-CWakE/lX+6QmLec4FheOnhb5anHYgEk3FGc5Z8yfEvw=' 'sha256-bj7LIaluzIceDBCVoFJMeHn3B3tam2hCC3BA3sT5xBo=' 'sha256-Nfowdl2r0esJGauZJrfckG1DC7NPWDhtrGawILntM3s=' 'sha256-Ya2fxgw0JxFx5YuJMoy3WGNejJ8FdxLqAiRxaPxGSrw=' 'sha256-N2fRZpt5+kEBuuNJOKrSWnplYQJbJ3R+snrEiqpX+A4=' 'sha256-mRPJ9hZyGCgoJ+1/KwhQNUbIaNU8wnvAnMp0iJCLTS0=' 'sha256-xdw9N0Z5raIPpFTeqeqeH9D3uJmsMBcfYolhITnh2Go=' 'sha256-69Mwt80/e4A5xqPrwif6C5p3NeL9kQ/u0ux8bWzWeJk=' 'sha256-3N5kkAQGeBTD4RaswK+xf/fQZdaBYEUuHyonknRiapI='; img-src 'self' data:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self'; upgrade-insecure-requests"
